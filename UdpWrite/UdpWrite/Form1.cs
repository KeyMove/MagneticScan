using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.NetworkInformation;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace UdpWrite
{
    public partial class Form1 : Form
    {

        UdpClient Search = new UdpClient(0);
        private IPAddress[] ips;
        private byte[] GetIPID;
        private IPEndPoint OutPoint;
        private IPAddress lasttarget;

        bool BroadcastFlag = true;
        private IPAddress TargetDev;

        OpenFileDialog of = new OpenFileDialog();
        SaveFileDialog sf = new SaveFileDialog();

        int WriteID = 0;
        FileInfo TargetFile;
        private bool DownloadFlag;

        IPAddress[] getIPAddress()
        {
            List<IPAddress> iplist = new List<IPAddress>();
            NetworkInterface[] nics = NetworkInterface.GetAllNetworkInterfaces();
            foreach (NetworkInterface adapter in nics)
            {
                //判断是否为以太网卡
                //Wireless80211         无线网卡    Ppp     宽带连接
                //Ethernet              以太网卡   
                //这里篇幅有限贴几个常用的，其他的返回值大家就自己百度吧！
                if (adapter.NetworkInterfaceType == NetworkInterfaceType.Ethernet || adapter.NetworkInterfaceType == NetworkInterfaceType.Wireless80211)
                {
                    if (adapter.Speed < 0) continue;
                    //获取以太网卡网络接口信息
                    IPInterfaceProperties ip = adapter.GetIPProperties();
                    //获取单播地址集
                    UnicastIPAddressInformationCollection ipCollection = ip.UnicastAddresses;
                    foreach (UnicastIPAddressInformation ipadd in ipCollection)
                    {
                        //InterNetwork    IPV4地址      InterNetworkV6        IPV6地址
                        //Max            MAX 位址
                        if (ipadd.Address.AddressFamily == AddressFamily.InterNetwork)
                            //判断是否为ipv4
                            iplist.Add(ipadd.Address);//获取ip
                    }
                }
            }
            return iplist.ToArray();
        }

        void BroadcastData(byte[] data)
        {
            for (int i = 0; i < ips.Length; i++)
            {
                Search.Send(data, data.Length, new IPEndPoint(ips[i].Address | 0xff000000, 2333));
            }
        }

        class CarData
        {
            public IPAddress ip;
            public int ID;
            public CarData(IPAddress ip, int id)
            {
                this.ip = ip;
                this.ID = id;
            }

            public override string ToString()
            {
                return string.Format("[{0}] - {1}", ip.ToString(), ID);
            }

        }

        public Form1()
        {
            InitializeComponent();
            
        }

        List<TextBox> sendtextbox = new List<TextBox>();
        List<Button> sendbtton = new List<Button>();

        void initSendBox()
        {
            for(int i = 0; i < 7; i++)
            {
                TextBox t = new TextBox();
                t.Size = SBOX.Size;
                t.Location = new Point(SBOX.Location.X, SBOX.Location.Y+(SBOX.Size.Height + 5) * i);
                sendtextbox.Add(t);
                SendPanel.Controls.Add(t);
                Button b = new Button();
                b.Text = i.ToString();
                b.Location = new Point(SButton.Location.X, SButton.Location.Y+(SButton.Size.Height + 5) * i);
                b.Size = new Size(21, 21);
                b.Click += B_Click;
                sendbtton.Add(b);
                SendPanel.Controls.Add(b);
            }
        }

        private void B_Click(object sender, EventArgs e)
        {
            int index = sendbtton.IndexOf((Button)sender);
            if(index!=-1)
                if(sendtextbox[index].Text.Length!=0)
                    SendTargetData(sendtextbox[index].Text);

        }

        private void Form1_Load(object sender, EventArgs e)
        {
            initSendBox();
            //StringBuilder r = new StringBuilder();
            //for (int i = ' '; i < 128; i++)
            //    r.Append((char)i);
            //FileData.Text = r.ToString();
            ips = getIPAddress();
            GetIPID = Encoding.Default.GetBytes("print(\"ID:\"..node.chipid())");
            OutPoint = new IPEndPoint(IPAddress.Any, 0);
            BroadcastFlag = true;
            new Task(() => {
                while (!this.IsDisposed)
                {
                    try
                    {
                        byte[] buff = Search.Receive(ref OutPoint);
                        lasttarget = OutPoint.Address;
                        OutPoint.Address = IPAddress.Any;
                        OutPoint.Port = 0;
                        string value = Encoding.Default.GetString(buff);
                        if (value.IndexOf("[") == 0)
                        {
                            value = value.Substring(1);
                            value = value.Substring(0, value.Length - 1);
                        }
                        if (value.IndexOf("ID:") == 0)
                        {
                            IPAddress ip = OutPoint.Address;
                            int id = int.Parse(value.Substring(3));
                            bool isfind = false;
                            foreach (CarData car in DevSelect.Items)
                            {
                                if (car.ID == id)
                                {
                                    if (car.ip.Address != lasttarget.Address)
                                    {
                                        car.ip = lasttarget;
                                    }
                                    isfind = true;
                                    break;
                                }
                            }
                            if (!isfind)
                            {
                                CarData cd = new CarData(lasttarget, id);

                                Invoke(new MethodInvoker(() =>
                                {
                                    DevSelect.Items.Add(cd);
                                    if (DevSelect.SelectedIndex == -1)
                                        DevSelect.SelectedIndex = 0;
                                }));
                            }
                            Invoke(new MethodInvoker(() =>
                            {
                                DevSelect.Update();
                            }));
                            continue;
                        }
                        else {
                            Invoke(new MethodInvoker(() =>
                            {
                                RecvText.AppendText(value+"\r\n");
                            }));
                        }
                        if (DownloadFlag)
                            if (value.IndexOf("W:") == 0)
                            {
                                int pos = int.Parse(value.Substring(2));
                                if (pos == WriteID)
                                {
                                    WriteID++;
                                    if (WriteID < 0)
                                    {
                                        SendTargetData("file.open(\"" + TargetFile.name + "\",\"w+\") print(\"W:" + WriteID + "\")");
                                    }
                                    else
                                    if (WriteID < TargetFile.lines.Count)
                                    {
                                        SendTargetData("file.writeline('" + TargetFile.lines[WriteID].Replace("\\", "\\\\").Replace("\"", "\\\"").Replace("'", "\\'") + "') print('W:" + WriteID + "')");
                                        Invoke(new MethodInvoker(() =>
                                        {
                                            Downprogress.Value = WriteID * 100 / TargetFile.lines.Count;
                                        }));
                                    }
                                    else
                                    {
                                        SendTargetData("file.close()");
                                        Invoke(new MethodInvoker(() =>
                                        {
                                            Downprogress.Value = 100;
                                            Downprogress.Visible = false;
                                            DownloadFlag = false;
                                        }));
                                    }
                                }
                            }
                            else if (value.IndexOf("D:") == 0)
                            {
                                int pos = int.Parse(value.Substring(2));
                                if (pos == WriteID)
                                {
                                    WriteID++;
                                    if (WriteID < 0)
                                    {
                                        SendTargetData("file.open(\"" + TargetFile.name + "\",\"w+\") function t2s(t) for i=1,#t do t[i]=string.char(t[i]) end return table.concat(t) end rp="+WriteID+" print(\"D:\"..rp)");
                                    }
                                    else
                                    if ((TargetFile.stream.Length - TargetFile.stream.Position)!=0)
                                    {
                                        StringBuilder sb = new StringBuilder();
                                        int i = (TargetFile.stream.Length - TargetFile.stream.Position) >= 32 ? 32 : (int)(TargetFile.stream.Length - TargetFile.stream.Position);
                                        while(i--!=0)
                                        {
                                            sb.Append(TargetFile.stream.ReadByte());
                                            sb.Append(',');
                                        }
                                        TargetFile.writeInfo = sb.ToString();
                                        SendTargetData("file.write(t2s({" + TargetFile.writeInfo + "})) rp=" + WriteID + " print(\"D:\"..rp)");
                                        Invoke(new MethodInvoker(() =>
                                        {
                                            Downprogress.Value = WriteID * 100 / (int)(TargetFile.stream.Length/32);
                                        }));
                                    }
                                    else
                                    {
                                        SendTargetData("file.close()");
                                        Invoke(new MethodInvoker(() =>
                                        {
                                            Downprogress.Value = 100;
                                            //Downprogress.Visible = false;
                                        }));
                                    }
                                }
                            }

                    }
                    catch { }
                }
            }).Start();
            int SearchCount = 15;
            new Task(() => {
                while (!this.IsDisposed)
                {
                    try
                    {
                        if (++SearchCount >= 15)
                        {
                            if(BroadcastFlag)
                                BroadcastData(GetIPID);
                            SearchCount = 0;
                        }
                    }
                    catch { }
                    Thread.Sleep(100);
                }
            }).Start();
        }

        private void SelectDevButton_Click(object sender, EventArgs e)
        {
            if (BroadcastFlag)
            {
                if (DevSelect.SelectedItem != null)
                {
                    BroadcastFlag = false;
                    TargetDev = ((CarData)DevSelect.SelectedItem).ip;
                    SelectDevButton.Text = "断开";
                }
            }
            else
            {
                BroadcastFlag = true;
                SelectDevButton.Text = "连接";
            }
        }

        class FileInfo {
            public List<string> lines;
            public string data;
            public string name;
            public string path;
            public Stream stream;
            public string writeInfo;
            public FileInfo(string file)
            {
                lines = new List<string>();
                stream = new FileStream(file, FileMode.Open);
                StreamReader sr = new StreamReader(stream);
                data = sr.ReadToEnd()+' ';
                path = file;
                name = file.Substring(file.LastIndexOf('\\')+1);
                sr.Close();
                setData(data);
            }

            public FileInfo(string file,bool mode)
            {
                lines = new List<string>();
                stream = new FileStream(file, FileMode.Open);
                path = file;
                name = file.Substring(file.LastIndexOf('\\') + 1);
                data = "HEX Data!";
            }

            void setData(string str)
            {
                data = str+' ';
                lines.Clear();
                foreach (string s in str.Split('\n'))
                    if(s!=null&&s.Length>1)
                        lines.Add(s.Substring(0, s.Length - 1));
            }

            public override string ToString()
            {
                return name;
            }

            public void reload()
            {
                lines = new List<string>();
                StreamReader sr = new StreamReader(new FileStream(path, FileMode.Open));
                data = sr.ReadToEnd() + ' ';
                name = path.Substring(path.LastIndexOf('\\') + 1);
                sr.Close();
                setData(data);
            }

        }
        

        private void OpenFile_Click(object sender, EventArgs e)
        {
            of.Filter = "Lua脚本,数据文件(*.lua,*.dat)|*.lua;*.dat";
            if (of.ShowDialog() == DialogResult.OK)
            {
                if (of.FileName.ToLower().EndsWith("lua"))
                {
                    FileList.Items.Add(new FileInfo(of.FileName));
                    if (FileList.SelectedIndex == -1)
                        FileList.SelectedIndex = 0;
                }
                else
                {
                    if (of.FileName.ToLower().EndsWith("dat"))
                    {
                        FileList.Items.Add(new FileInfo(of.FileName,true));
                        if (FileList.SelectedIndex == -1)
                            FileList.SelectedIndex = 0;
                    }
                }
            }
        }

        private void FileList_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (FileList.SelectedIndex != -1)
            {
                TargetFile = (FileInfo)FileList.SelectedItem;
                FileData.Text = TargetFile.data;
            }
        }

        private void DownloadButton_Click(object sender, EventArgs e)
        {
            if (TargetFile != null&&BroadcastFlag==false)
            {
                Downprogress.Visible = true;
                Downprogress.Value = 0;
                DownloadFlag = true;
                WriteID = -2;
                //TargetFile.setData(FileData.Text);
                if(TargetFile.name.ToLower().EndsWith("lua"))
                    SendTargetData("file.remove(\"" + TargetFile.name + "\") print(\"W:" + WriteID + "\")");
                else
                    SendTargetData("file.remove(\"" + TargetFile.name + "\") print(\"D:" + WriteID + "\")");
            }
        }

        void SendTargetData(string str)
        {
            if (BroadcastFlag) return;
            Invoke(new MethodInvoker(() =>
            {
                byte[] data = Encoding.Default.GetBytes(str);
                Search.Send(data, data.Length, new IPEndPoint(TargetDev, 2333));
            }));
        }

        private void SendCmd_Click(object sender, EventArgs e)
        {
            SendTargetData(SendText.Text);            
        }

        private void 刷新ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (FileList.SelectedIndex != -1)
            {
                TargetFile = (FileInfo)FileList.SelectedItem;
                TargetFile.reload();
                FileData.Text = TargetFile.data;
            }
        }

        private void 删除ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (FileList.SelectedIndex != -1)
            {
                FileList.Items.RemoveAt(FileList.SelectedIndex);
                FileData.Text = "";
            }
        }

        byte func(byte c)
        {

            byte[] sta = new byte[] {//不多不少的静态数据
        0x00,0x08,0x04,0x0C,0x02,0x0A,0x06,0x0E,0x01,0x09,0x05,0x0D,0x03,0x0B,0x07,0x0F
            };

            int d = 0; //没有判断
            d |= (sta[c & 0xF]) << 4;
            d |= sta[c >> 4];
            return (byte)d;
        }
        private void save(object sender, EventArgs e)
        {
           byte[] chartable=new byte[] {
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*" ",0*/

0x00,0x00,0x00,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x33,0x00,0x00,0x00,0x00,/*"!",1*/

0x00,0x10,0x0C,0x02,0x10,0x0C,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*""",2*/

0x00,0x40,0xC0,0x78,0x40,0xC0,0x78,0x00,0x00,0x04,0x3F,0x04,0x04,0x3F,0x04,0x00,/*"#",3*/

0x00,0x70,0x88,0x88,0xFC,0x08,0x30,0x00,0x00,0x18,0x20,0x20,0xFF,0x21,0x1E,0x00,/*"$",4*/

0xF0,0x08,0xF0,0x80,0x60,0x18,0x00,0x00,0x00,0x31,0x0C,0x03,0x1E,0x21,0x1E,0x00,/*"%",5*/

0x00,0xF0,0x08,0x88,0x70,0x00,0x00,0x00,0x1E,0x21,0x23,0x2C,0x19,0x27,0x21,0x10,/*"&",6*/

0x00,0x12,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"'",7*/

0x00,0x00,0x00,0xE0,0x18,0x04,0x02,0x00,0x00,0x00,0x00,0x07,0x18,0x20,0x40,0x00,/*"(",8*/

0x00,0x02,0x04,0x18,0xE0,0x00,0x00,0x00,0x00,0x40,0x20,0x18,0x07,0x00,0x00,0x00,/*")",9*/

0x40,0x40,0x80,0xF0,0x80,0x40,0x40,0x00,0x02,0x02,0x01,0x0F,0x01,0x02,0x02,0x00,/*"*",10*/

0x00,0x00,0x00,0x00,0xE0,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x0F,0x01,0x01,0x01,/*"+",11*/

0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x90,0x70,0x00,0x00,0x00,0x00,0x00,/*",",12*/

0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x00,/*"-",13*/

0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,0x00,0x00,/*".",14*/

0x00,0x00,0x00,0x00,0xC0,0x38,0x04,0x00,0x00,0x60,0x18,0x07,0x00,0x00,0x00,0x00,/*"/",15*/

0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x0F,0x10,0x20,0x20,0x10,0x0F,0x00,/*"0",16*/

0x00,0x00,0x10,0x10,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,/*"1",17*/

0x00,0x70,0x08,0x08,0x08,0x08,0xF0,0x00,0x00,0x30,0x28,0x24,0x22,0x21,0x30,0x00,/*"2",18*/

0x00,0x30,0x08,0x08,0x08,0x88,0x70,0x00,0x00,0x18,0x20,0x21,0x21,0x22,0x1C,0x00,/*"3",19*/

0x00,0x00,0x80,0x40,0x30,0xF8,0x00,0x00,0x00,0x06,0x05,0x24,0x24,0x3F,0x24,0x24,/*"4",20*/

0x00,0xF8,0x88,0x88,0x88,0x08,0x08,0x00,0x00,0x19,0x20,0x20,0x20,0x11,0x0E,0x00,/*"5",21*/

0x00,0xE0,0x10,0x88,0x88,0x90,0x00,0x00,0x00,0x0F,0x11,0x20,0x20,0x20,0x1F,0x00,/*"6",22*/

0x00,0x18,0x08,0x08,0x88,0x68,0x18,0x00,0x00,0x00,0x00,0x3E,0x01,0x00,0x00,0x00,/*"7",23*/

0x00,0x70,0x88,0x08,0x08,0x88,0x70,0x00,0x00,0x1C,0x22,0x21,0x21,0x22,0x1C,0x00,/*"8",24*/

0x00,0xF0,0x08,0x08,0x08,0x10,0xE0,0x00,0x00,0x01,0x12,0x22,0x22,0x11,0x0F,0x00,/*"9",25*/

0x00,0x00,0x00,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,/*":",26*/

0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x00,0x00,0x00,0x00,/*";",27*/

0x00,0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00,0x01,0x02,0x04,0x08,0x10,0x20,0x00,/*"<",28*/

0x00,0x40,0x40,0x40,0x40,0x40,0x40,0x00,0x00,0x02,0x02,0x02,0x02,0x02,0x02,0x00,/*"=",29*/

0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00,0x00,0x20,0x10,0x08,0x04,0x02,0x01,0x00,/*">",30*/

0x00,0x70,0x48,0x08,0x08,0x88,0x70,0x00,0x00,0x00,0x00,0x30,0x37,0x00,0x00,0x00,/*"?",31*/

0xC0,0x30,0xC8,0x28,0xE8,0x10,0xE0,0x00,0x07,0x18,0x27,0x28,0x2F,0x28,0x17,0x00,/*"@",32*/

0x00,0x00,0xC0,0x38,0xE0,0x00,0x00,0x00,0x20,0x3C,0x23,0x02,0x02,0x27,0x38,0x20,/*"A",33*/

0x08,0xF8,0x88,0x88,0x88,0x70,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x11,0x0E,0x00,/*"B",34*/

0xC0,0x30,0x08,0x08,0x08,0x08,0x38,0x00,0x07,0x18,0x20,0x20,0x20,0x10,0x08,0x00,/*"C",35*/

0x08,0xF8,0x08,0x08,0x08,0x10,0xE0,0x00,0x20,0x3F,0x20,0x20,0x20,0x10,0x0F,0x00,/*"D",36*/

0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x20,0x23,0x20,0x18,0x00,/*"E",37*/

0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x00,0x03,0x00,0x00,0x00,/*"F",38*/

0xC0,0x30,0x08,0x08,0x08,0x38,0x00,0x00,0x07,0x18,0x20,0x20,0x22,0x1E,0x02,0x00,/*"G",39*/

0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x20,0x3F,0x21,0x01,0x01,0x21,0x3F,0x20,/*"H",40*/

0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,/*"I",41*/

0x00,0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,0x00,/*"J",42*/

0x08,0xF8,0x88,0xC0,0x28,0x18,0x08,0x00,0x20,0x3F,0x20,0x01,0x26,0x38,0x20,0x00,/*"K",43*/

0x08,0xF8,0x08,0x00,0x00,0x00,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x20,0x30,0x00,/*"L",44*/

0x08,0xF8,0xF8,0x00,0xF8,0xF8,0x08,0x00,0x20,0x3F,0x01,0x3E,0x01,0x3F,0x20,0x00,/*"M",45*/

0x08,0xF8,0x30,0xC0,0x00,0x08,0xF8,0x08,0x20,0x3F,0x20,0x00,0x07,0x18,0x3F,0x00,/*"N",46*/

0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x10,0x20,0x20,0x20,0x10,0x0F,0x00,/*"O",47*/

0x08,0xF8,0x08,0x08,0x08,0x08,0xF0,0x00,0x20,0x3F,0x21,0x01,0x01,0x01,0x00,0x00,/*"P",48*/

0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x10,0x28,0x28,0x30,0x50,0x4F,0x00,/*"Q",49*/

0x08,0xF8,0x88,0x88,0x88,0x88,0x70,0x00,0x20,0x3F,0x20,0x00,0x03,0x0C,0x30,0x20,/*"R",50*/

0x00,0x70,0x88,0x08,0x08,0x08,0x38,0x00,0x00,0x38,0x20,0x21,0x21,0x22,0x1C,0x00,/*"S",51*/

0x18,0x08,0x08,0xF8,0x08,0x08,0x18,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,/*"T",52*/

0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,/*"U",53*/

0x08,0x78,0x88,0x00,0x00,0xC8,0x38,0x08,0x00,0x00,0x07,0x38,0x0E,0x01,0x00,0x00,/*"V",54*/

0x08,0xF8,0x00,0xF8,0x00,0xF8,0x08,0x00,0x00,0x03,0x3E,0x01,0x3E,0x03,0x00,0x00,/*"W",55*/

0x08,0x18,0x68,0x80,0x80,0x68,0x18,0x08,0x20,0x30,0x2C,0x03,0x03,0x2C,0x30,0x20,/*"X",56*/

0x08,0x38,0xC8,0x00,0xC8,0x38,0x08,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,/*"Y",57*/

0x10,0x08,0x08,0x08,0xC8,0x38,0x08,0x00,0x20,0x38,0x26,0x21,0x20,0x20,0x18,0x00,/*"Z",58*/

0x00,0x00,0x00,0xFE,0x02,0x02,0x02,0x00,0x00,0x00,0x00,0x7F,0x40,0x40,0x40,0x00,/*"[",59*/

0x00,0x04,0x38,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x06,0x38,0xC0,0x00,/*"\",60*/

0x00,0x02,0x02,0x02,0xFE,0x00,0x00,0x00,0x00,0x40,0x40,0x40,0x7F,0x00,0x00,0x00,/*"]",61*/

0x00,0x00,0x04,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"^",62*/

0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,/*"_",63*/

0x00,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"`",64*/

0x00,0x00,0x80,0x80,0x80,0x00,0x00,0x00,0x00,0x19,0x24,0x24,0x12,0x3F,0x20,0x00,/*"a",65*/

0x10,0xF0,0x00,0x80,0x80,0x00,0x00,0x00,0x00,0x3F,0x11,0x20,0x20,0x11,0x0E,0x00,/*"b",66*/

0x00,0x00,0x00,0x80,0x80,0x80,0x00,0x00,0x00,0x0E,0x11,0x20,0x20,0x20,0x11,0x00,/*"c",67*/

0x00,0x00,0x80,0x80,0x80,0x90,0xF0,0x00,0x00,0x1F,0x20,0x20,0x20,0x10,0x3F,0x20,/*"d",68*/

0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x24,0x24,0x24,0x24,0x17,0x00,/*"e",69*/

0x00,0x80,0x80,0xE0,0x90,0x90,0x20,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,/*"f",70*/

0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x6B,0x94,0x94,0x94,0x93,0x60,0x00,/*"g",71*/

0x10,0xF0,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,/*"h",72*/

0x00,0x80,0x98,0x98,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,/*"i",73*/

0x00,0x00,0x00,0x80,0x98,0x98,0x00,0x00,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,/*"j",74*/

0x10,0xF0,0x00,0x00,0x80,0x80,0x80,0x00,0x20,0x3F,0x24,0x06,0x29,0x30,0x20,0x00,/*"k",75*/

0x00,0x10,0x10,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,/*"l",76*/

0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x20,0x3F,0x20,0x00,0x3F,0x20,0x00,0x3F,/*"m",77*/

0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,/*"n",78*/

0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,/*"o",79*/

0x80,0x80,0x00,0x80,0x80,0x00,0x00,0x00,0x80,0xFF,0x91,0x20,0x20,0x11,0x0E,0x00,/*"p",80*/

0x00,0x00,0x00,0x80,0x80,0x00,0x80,0x00,0x00,0x0E,0x11,0x20,0x20,0x91,0xFF,0x80,/*"q",81*/

0x80,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x20,0x20,0x3F,0x21,0x20,0x00,0x01,0x00,/*"r",82*/

0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x33,0x24,0x24,0x24,0x24,0x19,0x00,/*"s",83*/

0x00,0x80,0x80,0xE0,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x1F,0x20,0x20,0x10,0x00,/*"t",84*/

0x80,0x80,0x00,0x00,0x00,0x80,0x80,0x00,0x00,0x1F,0x20,0x20,0x20,0x10,0x3F,0x20,/*"u",85*/

0x80,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x03,0x0C,0x30,0x0C,0x03,0x00,0x00,/*"v",86*/

0x80,0x80,0x00,0x80,0x80,0x00,0x80,0x80,0x01,0x0E,0x30,0x0C,0x07,0x38,0x06,0x01,/*"w",87*/

0x00,0x80,0x80,0x80,0x00,0x80,0x80,0x00,0x00,0x20,0x31,0x0E,0x2E,0x31,0x20,0x00,/*"x",88*/

0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x00,0x81,0x86,0x78,0x18,0x06,0x01,0x00,/*"y",89*/

0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x21,0x30,0x2C,0x22,0x21,0x30,0x00,/*"z",90*/

0x00,0x00,0x00,0x00,0x00,0xFC,0x02,0x02,0x00,0x00,0x00,0x00,0x01,0x3E,0x40,0x40,/*"{",91*/

0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,/*"|",92*/

0x02,0x02,0xFC,0x00,0x00,0x00,0x00,0x00,0x40,0x40,0x3E,0x01,0x00,0x00,0x00,0x00,/*"}",93*/

0x00,0x02,0x01,0x02,0x02,0x04,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"~",94*/
};
            if (sf.ShowDialog() == DialogResult.OK)
            {
                FileStream fs = new FileStream(sf.FileName, FileMode.OpenOrCreate);
                fs.Write(chartable, 0, chartable.Length);
                fs.Flush();
                fs.Close();
            }
        }
    }
}
